###################################################
# Extract Opatch
###################################################

- name: Backup OPatch if not already backed up
  ansible.builtin.shell: mv {{ item.oracle_home }}/OPatch {{ temp_dir }}/{{ item.oh }}.OPatch.bkup
  loop: "{{ required_homes_install }}"
  loop_control:
    label: "{{ item.oracle_home }}"
  when:
    - op_unzipped.results | selectattr('item.oh', 'equalto', item.oh) | map(attribute='stat.exists') | list | first != true
    - opatch_bkup.results | selectattr('item.oh', 'equalto', item.oh) | map(attribute='stat.exists') | list | first != true

- name: Extracting Opatch (Remote)
  ansible.builtin.unarchive:
    src: "{{ opatch_sw }}"
    dest: "{{ item.oracle_home }}"
    keep_newer: yes
    owner: "{{ db_oracle_user }}"
    group: "{{ db_oinstall_group }}"
  loop: "{{ required_homes_install }}"
  loop_control:
    label: "{{ item.oracle_home }}"
  when:
    - op_unzipped.results | selectattr('item.oh', 'equalto', item.oh) | map(attribute='stat.exists') | list | first != true
    - ora_binary_location == 'remote'
  register: ex_opatch

- name: Extracting Opatch (Local|NFS)
  ansible.builtin.unarchive:
    src: "{{ opatch_sw }}"
    dest: "{{ item.oracle_home }}"
    keep_newer: yes
    owner: "{{ db_oracle_user }}"
    group: "{{ db_oinstall_group }}"
    remote_src: yes
  loop: "{{ required_homes_install }}"
  loop_control:
    label: "{{ item.oracle_home }}"
  when:
    - op_unzipped.results | selectattr('item.oh', 'equalto', item.oh) | map(attribute='stat.exists') | list | first != true
    - ora_binary_location in ['local','nfs']
  register: ex_opatch

- name: Creating done file
  ansible.builtin.file:
    path: "{{ temp_dir }}/done/{{ item.oh }}.opunzip.done"
    state: touch
    owner: "{{ db_oracle_user }}"
    group: "{{ db_oinstall_group }}"
  loop: "{{ required_homes_install }}"
  loop_control:
    label: "{{ item.oracle_home }}"
  when:
    - op_unzipped.results | selectattr('item.oh', 'equalto', item.oh) | map(attribute='stat.exists') | list | first != true
