- name: Creating Temp Directory | {{ temp_dir }}
  ansible.builtin.file:
     dest={{ temp_dir }}/{{ item }}
     owner={{ db_oracle_user }}
     group={{ db_oinstall_group }}
     state=directory
  with_items:
       - done
       - scripts
       - logs
  changed_when: false

- name: Reading Oracle Inventory File
  slurp:
    path: "{{ ora_inventory }}/ContentsXML/inventory.xml"
  register: inv_oh

- name: Setting Fact for Inventory File
  set_fact:
    input_lines: "{{ inv_oh.content | b64decode | string | split('\n') }}"

- name: Preparing Oracle Homes List for Installation
  set_fact:
    required_homes: "{{ required_homes | default([]) + [{'oh': item.target_db_home | regex_replace('/',''), 'oracle_home': item.target_db_home }] }}"
  loop: "{{ databases }}"
  when: not input_lines | select('search', '(?i)' + item.target_db_home) | list | length > 0
  vars:
    oraclehomes: "{{ item | regex_escape }}"

- name: Copying Oracle RDBMS Install response file
  template:
    src: oracle_19c_install.rsp.j2
    dest: "{{ temp_dir }}/scripts/oracle_19c_install_{{ item.oh }}.rsp"
    owner: "{{ db_oracle_user }}"
    group: "{{ db_oinstall_group }}"
    mode: '0644'
  with_items:
       - "{{ required_homes }}"
  when: required_homes is defined

- name: Copying oracle_install.sh
  template:
    src: oracle_install.sh.j2
    dest: "{{ temp_dir }}/scripts/oracle_install_{{ item.oh }}.sh"
    owner: "{{ db_oracle_user }}"
    group: "{{ db_oinstall_group }}"
    mode: '0755'
  with_items:
       - "{{ required_homes }}"
  when: required_homes is defined

- name: Installing 19c RDBMS, this will take around 30mins.
  ansible.builtin.command: "ksh93 {{ temp_dir }}/scripts/oracle_install_{{ item.oh }}.sh"
  register: oracle_install
  become: yes
  become_user: "{{ db_oracle_user }}"
  with_items:
       - "{{ required_homes }}"
  when: required_homes is defined

- name: Oracle Install Output
  debug: msg="item"
  with_items: "{{ oracle_install.results }}"
  when: required_homes is defined

- name: Executing root.sh
  ansible.builtin.shell: "{{ item.oracle_home }}/root.sh"
  register: execroot
  with_items:
    - "{{ required_homes }}"
  when: required_homes is defined

- name: 
  debug: msg="All the required Oracle Homes are already installed, nothing to do"
  when: required_homes is not defined 
