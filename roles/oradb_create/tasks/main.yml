- name: set fact
  set_fact:
      create_listener: "{{ create_listener }}"
  with_items: "{{ oracle_databases }}"
  tags: set_fact

- name: Create Stage directory for response file.
  ansible.builtin.file:
    path: "{{ oracle_rsp_stage }}"
    state: directory

- include: listener.yml
  when: create_listener

- name: Check if database is already created
  shell: grep {{ item.oracle_db_name }}:{{ oracle_home_db }} /etc/oratab |wc -l
  with_items: "{{ oracle_databases }}"
  when: item.oracle_db_name is defined
  tags:
  - checkifdbexists
  register: checkdbexist

- name: Copy custom dbca Templates to ORACLE_HOME/assistants/dbca/templates
  template: src={{ item.0.dbca_templatename }} dest={{ oracle_home_db }}/assistants/dbca/templates/{{ item.0.dbca_templatename }} owner={{ oracle_user }} group={{ oracle_group }} mode=640
  with_together:
     - "{{ oracle_databases }}"
  when: item.0.dbca_templatename is defined and item.0.dbca_templatename not in('New_Database.dbt','General_Purpose.dbc')

- name: Create responsefile for dbca
  template: src=dbca-create-db.rsp.{{ item.0.oracle_version_db }}.j2 dest={{ oracle_rsp_stage }}/{{ oracle_dbca_rsp }}  owner={{ oracle_user }} group={{ oracle_group }} mode=600 backup=no
  with_together:
     - "{{ oracle_databases }}"
     - "{{ checkdbexist.results }}"
  run_once: "{{ configure_cluster }}"
  when: item.1.stdout != "1"

- name: Create database(s)
  shell: "time {{ oracle_home_db }}/bin/dbca -createDatabase -responseFile {{ oracle_rsp_stage }}/{{ oracle_dbca_rsp }} -silent -redoLogFileSize {{ item.0.redolog_size_in_mb }} {{ dbca_initParams }} -ignorePreReqs"
  with_together:
     - "{{ oracle_databases }}"
     - "{{ checkdbexist.results }}"
  become_user: "{{ oracle_user }}"
  run_once: "{{ configure_cluster}}"
  when: item.1.stdout != "1" and item.0.state |upper == "PRESENT"
  register: oradbcreate

- debug: var=item
  with_items:
       - "{{ oradbcreate.results|map(attribute='stdout_lines')|list }}"
  run_once: "{{ configure_cluster}}"
  when: oradbcreate.changed
  ignore_errors: true

- name: Add dotprofile (1)
  shell:  ps -ef | grep -w "ora_pmon_{{ item.oracle_db_name }}" |grep -v grep | sed 's/^.*pmon_//g'
  with_items: "{{ oracle_databases }}"
  register: dbs
  changed_when: False

- name: Add dotprofile (2)
  template: src=dotprofile-db.j2 dest={{ oracle_user_home }}/.profile_{{ item.0.oracle_db_name }} owner={{ oracle_user }} group={{ oracle_group }} mode=775 backup=yes
  with_together:
  - "{{oracle_databases}}"
  - "{{dbs.results}}"

- name: Check if database is running
  shell: ps -ef |grep pmon |grep -v grep
  register: psout
  ignore_errors: true

- debug: var=psout.stdout_lines
