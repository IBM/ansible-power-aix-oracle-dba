- name: gi-opatch | Check opatch dir
  ansible.builtin.stat: path={{ oracle_home_gi }}/OPatch
  register: opatchdir

- name: gi-opatch | Check current opatch version
  oracle_opatch:
     oracle_home={{ oracle_home_gi }}
     state=opatchversion
  register: current_opatch_version
  become_user: "{{ grid_install_user }}"
  when: opatchdir.stat.exists and gi_patches is defined and gi_patches['opatch_minversion'] is defined

- name: gi-opatch | Backup existing OPatch directory
  ansible.builtin.command: mv "{{ oracle_home_gi }}/OPatch" "{{ oracle_home_gi }}/OPatch{{ lookup('pipe', 'date +%Y%m%d-%H%M') }}"
  with_items: "{{ oracle_opatch_patch }}"
  when: opatchdir.stat.exists and item.version == oracle_install_version_gi and (current_opatch_version.msg is version_compare(gi_patches['opatch_minversion'], '<'))

- name: gi-opatch | Extract OPatch to GI Home (from local/nfs)
  ansible.builtin.unarchive:
      src={{ item.filename }}
      dest={{ oracle_home_gi }}
      owner={{ grid_install_user }}
      group={{ oracle_group }}
      remote_src=yes
  become: yes
  with_items: "{{ oracle_opatch_patch }}"
  when: 
    - item.version == oracle_install_version_gi
    - ora_binary_location in ['local','nfs']
    - not opatchdir.stat.exists or (current_opatch_version.msg is defined and current_opatch_version.msg is version_compare(gi_patches['opatch_minversion'], '<'))

- name: gi-opatch | Extract OPatch to GI Home (from remote location)
  ansible.builtin.unarchive:
      src={{ item.filename }}
      dest={{ oracle_home_gi }}
      owner={{ grid_install_user }}
      group={{ oracle_group }}
  become: yes
  with_items: "{{ oracle_opatch_patch }}"
  when: 
    - item.version == oracle_install_version_gi
    - ora_binary_location in ['remote']
    - not opatchdir.stat.exists or (current_opatch_version.msg is defined and current_opatch_version.msg is version_compare(gi_patches['opatch_minversion'], '<'))
