- name: gi-opatch | check if GI has been configured
  ansible.builtin.stat: path=/etc/oracle/olr.loc
  register: olrloc

- name: gi-opatch | set fact for patch_before_rootsh
  ansible.builtin.set_fact:
      patch_before_rootsh: False
  when: olrloc.stat.exists and patch_before_rootsh

- name: Creating NFS filesystem from nfshost.
  ibm.power_aix.filesystem:
    device: "{{ ora_nfs_device }}"
    nfs_server: "{{ ora_nfs_host }}"
    filesystem: "{{ ora_nfs_filesystem }}"
    state: present
  when: ora_binary_location == 'nfs'
  become: yes

- name: gi-opatch | Create patch-base directory (version specific)
  ansible.builtin.file:
     dest={{ oracle_patch_stage }}/{{ oracle_install_version_gi }}
     mode=777
     state=directory
  tags:
    - directories

- name: gi-opatch | Extract GI patch files to patch base (from local|nfs)
  ansible.builtin.unarchive:
      src={{ item[0].filename }}
      dest={{ oracle_patch_stage }}/{{ oracle_install_version_gi }}
      creates={{ oracle_patch_stage }}/{{ oracle_install_version_gi }}/{{ item[0].creates | default (omit) }}
      remote_src=True
  become_user: "{{ grid_install_user }}"
  with_nested:
     - "{{ oracle_sw_patches }}"
     - "{{ gi_patches['opatchauto'] }}"
  when: item[1].patchid == item[0].patchid and ora_binary_location in ['local','nfs']

- name: gi-opatch | Extract GI patch files to patch base (from remote)
  ansible.builtin.unarchive:
      src={{ item[0].filename }}
      dest={{ oracle_patch_stage }}/{{ oracle_install_version_gi }}
      creates={{ oracle_patch_stage }}/{{ oracle_install_version_gi }}/{{ item[0].creates | default (omit) }}
  become_user: "{{ grid_install_user }}"
  with_nested:
     - "{{ oracle_sw_patches }}"
     - "{{ gi_patches['opatchauto'] }}"
  when: item[1].patchid == item[0].patchid and ora_binary_location in ['remote']

- name: include opatch-upgrade.yml
  ansible.builtin.import_tasks: opatch-upgrade.yml
  when: apply_patches_gi

- name: gi-opatch | Manage opatchauto patches for GI (after software only install)
  oracle_opatch:
    oracle_home={{ oracle_home_gi }}
      patch_base={{ oracle_patch_stage }}/{{ oracle_install_version_gi }}/{{ item.0.path | default (item.0.patchid)}}/{{ item.1}}
      patch_id={{ item.1 }}
      patch_version={{ item.1.patchversion |default(omit)}}
      opatchauto=False
      conflict_check=True
      ocm_response_file={{ ocm_response_file | default(omit)}}
      output=verbose
      state={{ item.0.state }}
  with_subelements:
     - "{{ gi_patches['opatchauto'] }}"
     - subpatches
  become: yes
  become_user: "{{ grid_install_user }}"
  tags:
    - apply_psu_grid
  when: apply_patches_gi and gi_patches is defined and gi_patches['opatchauto'] is defined and patch_before_rootsh and not olrloc.stat.exists
  register: psuapplym

- name: gi-opatch | Manage opatchauto patches for GI
  oracle_opatch:
      oracle_home={{ oracle_home_gi }}
      patch_base={{ oracle_patch_stage }}/{{ oracle_install_version_gi }}/{{ item.path | default (item.patchid)}}/
      patch_id={{ item.patchid }}
      patch_version={{ item.patchversion |default(omit)}}
      opatchauto=True
      rolling={{item.rolling | default(True)}}
      conflict_check=True
      ocm_response_file={{ ocm_response_file | default(omit)}}
      output=verbose
      state={{ item.state }}
  with_items:
     - "{{ gi_patches['opatchauto'] }}"
  become: yes
  tags:
    - apply_psu_grid
  when: apply_patches_gi and gi_patches is defined and gi_patches['opatchauto'] is defined and olrloc.stat.exists
  register: psuapplym

- name: gi-opatch | Manage non opatchauto patches for GI
  oracle_opatch:
      oracle_home={{ oracle_home_gi }}
      patch_base={{ oracle_patch_stage }}/{{ oracle_install_version_gi }}/{{ item.path | default (item.patchid)}}/
      patch_id={{ item.patchid }}
      patch_version={{ item.patchversion |default(omit)}}
      opatchauto=False
      conflict_check=True
      ocm_response_file={{ ocm_response_file | default(omit)}}
      output=verbose
      state={{ item.state }}
  with_items:
     - "{{ gi_patches['opatch'] }}"
  become: yes
  become_user: "{{ grid_install_user }}"
  tags:
    - apply_psu_grid
  when: apply_patches_gi and gi_patches is defined and gi_patches['opatch'] is defined and patch_before_rootsh and not olrloc.stat.exists
  register: psuapplym

- name: gi-opatch | RU version
  oracle_opatch:
     oracle_home={{ oracle_home_gi }}
     state=ruversion
  register: current_ru_version
  become_user: "{{ grid_install_user }}"
  when: apply_patches_gi and gi_patches is defined and gi_patches['opatchauto'] is defined and olrloc.stat.exists

- debug:
    msg: "{{ current_ru_version.msg }}"
  when: apply_patches_gi and gi_patches is defined and gi_patches['opatchauto'] is defined and olrloc.stat.exists
