- set_fact:
       oracle_home_db: "{%- if db_homes_config[dbh.home]['oracle_home'] is defined  -%}
                            {{db_homes_config[dbh.home]['oracle_home']}}
                        {%- else -%}
                             {{oracle_base}}/{{db_homes_config[dbh.home]['home']}}
                        {%- endif -%}"
- ansible.builtin.import_tasks: unpack-files.yml
  when: apply_patches_db

- ansible.builtin.import_tasks: opatch-upgrade.yml
  when: apply_patches_db

- name: Checking the Patch ID
  shell: "export ORACLE_HOME={{ oracle_home_db }}; {{ oracle_home_db }}/OPatch/opatch lsinventory | grep {{ item.1 }} | wc -l"
  register: count
  with_subelements:
      - "{{ db_homes_config[dbh.home]['opatch'] }}"
      - subpatches
      - skip_missing: True
  when:
    - db_homes_config[dbh.home]['opatch'] is defined
  become: yes
  become_user: "{{ oracle_user }}"

- name: Store Patch count list
  set_fact:
    ptid_list: "{{ ptid_list | default([]) + [item.stdout] }}"
  loop: "{{ count.results }}"
  no_log: true

- ansible.builtin.import_tasks: stop_services.yml
  when: db_homes_config[dbh.home]['stop_services'] is defined and db_homes_config[dbh.home]['stop_services']

- name: Stop Home | Stop Oracle Home on RAC nodes for patching when ACFS is used
  ansible.builtin.shell: "export ORACLE_HOME={{ oracle_home_db }} && {{ oracle_home_db }}/bin/srvctl stop home -o {{ oracle_home_db }} -n {{ item.node }} -f -stopoption IMMEDIATE -s /tmp/{{ item.node }}"
  with_items: "{{ node_list }}"
  when: apply_patches_db and acfs_used is defined and acfs_used
  run_once: True
  become: yes
  become_user: "{{ oracle_user }}"

- debug: msg="Managing patches for {{ oracle_home_db }}"
  when:
    - db_homes_config[dbh.home]['opatch'] is defined
    - apply_patches_db

- name: db-opatch | Manage opatchauto patches for DB (non-gi)
  oracle_opatch:
      oracle_home={{ oracle_home_db }}
      patch_base={{ oracle_patch_stage }}/{{ dbh.db_version }}/{{ item.path| default (item.0.patchid) }}/{{ item.1 }}
      patch_id={{ item.1 }}
      patch_version={{ item.1.patchversion |default(omit)}}
      opatchauto=False
      conflict_check=True
      ocm_response_file={{ ocm_response_file | default(omit)}}
      output=verbose
      state={{ item.0.state }}
  with_subelements:
      - "{{ db_homes_config[dbh.home]['opatch'] }}"
      - subpatches
      - skip_missing: True
  become: yes
  become_user: "{{ oracle_user }}"
  when:
   - apply_patches_db
   - db_homes_config[dbh.home]['opatch'] is defined
   - item.1 is defined
  register: psuapplym

- name: db-opatch | Manage opatchauto patches for DB (gi)
  oracle_opatch:
      oracle_home={{ oracle_home_db }}
      patch_base={{ oracle_patch_stage }}/{{ dbh.db_version }}/{{ item.path | default (item.patchid) }}/
      patch_id={{item.patchid}}
      patch_version={{ item.patchversion |default(omit)}}
      opatchauto=True
      conflict_check=True
      ocm_response_file={{ ocm_response_file | default(omit) }}
      output=verbose
      state={{ item.state }}
  with_items:
      - "{{ db_homes_config[dbh.home]['opatchauto'] }}"
  become: yes
  when: apply_patches_db and db_homes_config[dbh.home]['opatchauto'] is defined and olrloc.stat.exists
  register: psuapplym

- name: Opatch lspatches output
  oracle_opatch:
     oracle_home={{ oracle_home_db }}
     state=ruversion
  register: current_ru_version
  become: yes
  become_user: "{{ oracle_user }}"  
  when: apply_patches_db and db_homes_config[dbh.home]['opatchauto'] is defined or db_homes_config[dbh.home]['opatch'] is defined

- ansible.builtin.debug:
    msg: "{{ current_ru_version.msg }}"
  when: apply_patches_db and db_homes_config[dbh.home]['opatchauto'] is defined or db_homes_config[dbh.home]['opatch'] is defined

- ansible.builtin.import_tasks: start_services.yml
  when: db_homes_config[dbh.home]['stop_services'] is defined and db_homes_config[dbh.home]['stop_services']

- name: Start Oracle Home on RAC nodes post patching when ACFS is used
  ansible.builtin.shell: "export ORACLE_HOME={{ oracle_home_db }} && {{ oracle_home_db }}/bin/srvctl start home -o {{ oracle_home_db }} -n {{ item.node }} -s /tmp/{{ item.node }}"
  with_items: "{{ node_list }}"
  when: apply_patches_db and acfs_used is defined and acfs_used
  run_once: True  
  become: yes
  become_user: "{{ oracle_user }}"

- name: Remove stat files
  ansible.builtin.file:
    path: /tmp/{{ item.node }}
    state: absent
  with_items: "{{ node_list }}"
  become: yes
  become_user: "{{ oracle_user }}"  
  run_once: True
  when: apply_patches_db and acfs_used is defined and acfs_used
